{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample IzBiz server by nino.  ",
    "version": "1.0.0",
    "title": "Swagger IzBiz",
    "termsOfService": "http://localhost:5050",
    "contact": {
      "email": "11351@myoffice.site"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:5050",
  "basePath": "/v1/api",
  "tags": [
    {
      "name": "project",
      "description": "Everything about projects",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://iz-biz.herokuapp.com/"
      }
    },
    {
      "name": "user",
      "description": "Operations about users",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://iz-biz.herokuapp.com/"
      }
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "return all user(s)",
        "description": "",
        "operationId": "returnUsers",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find user by ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to return",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update an existing user",
        "description": "",
        "operationId": "updateUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "User id that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "in": "body",
            "name": "body",
            "description": "User objects that are needed to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Project not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/project": {
      "post": {
        "tags": [
          "project"
        ],
        "summary": "Add a new project",
        "description": "",
        "operationId": "addProject",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Project object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "project"
        ],
        "summary": "return all project(s)",
        "description": "",
        "operationId": "returnProject",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/project/{id}": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Find project by ID",
        "description": "Returns a single project",
        "operationId": "getProjectById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of project to return",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      },
      "put": {
        "tags": [
          "project"
        ],
        "summary": "Update an existing project",
        "description": "",
        "operationId": "updateProject",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Project id that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          {
            "in": "body",
            "name": "body",
            "description": "Project objects that are needed to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Project not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "Deletes a project",
        "description": "",
        "operationId": "deleteProject",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project id to delete",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "project_name": {
          "type": "string",
          "required": true
        },
        "project_value": {
          "type": "number",
          "minimum": 1000000
        },
        "project_pictures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "project_current": {
          "type": "number"
        },
        "project_holders": {
          "type": "array",
          "items": {
            "properties": {
              "picture": {
                "type": "string"
              },
              "username": {
                "type": "string",
                "required": true
              }
            },
            "type": "object"
          }
        },
        "project_author": {
          "type": "array",
          "items": {
            "properties": {
              "picture": {
                "type": "string"
              },
              "username": {
                "type": "string",
                "required": true
              }
            },
            "type": "object"
          }
        },
        "project_desc": {
          "type": "string"
        },
        "project_isOnGoing": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Project"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more",
    "url": "http://swagger.io"
  }
}